# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
# Generate Predictions
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
step_log(windspeed)
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Check for NA, NaN, or Inf values in the dataset
sum(is.na(baked_train))
sum(is.nan(baked_train))
sum(is.infinite(baked_train))
# Check for NA, NaN, or Inf values in the dataset
sum(is.na(baked_train))
sum(is.nan(baked_train))
sum(is.infinite(baked_train))
# Identify rows with missing or problematic values
baked_train %>% filter(if_any(everything(), ~is.na(.) | is.nan(.) | is.infinite(.)))
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
library(recipes)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
library(recipes)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season))
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
# Generate Predictions
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
# Prepare the Kaggle submission
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
# Write out the file
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season))
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
# Write out the file
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season))
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE))
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE))
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
# Write out the file
vroom_write(x = kaggle_submission, file = "./LinearPredsBaked.csv", delim = ",")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season))%>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE))
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
#--------Linear Model--------------
## Setup and Fit the Linear Regression Model
my_linear_model <- linear_reg() %>% #Type of model
set_engine("lm") %>% # Engine = What R function to use
set_mode("regression") %>% # Regression just means quantitative response6
fit(formula=count ~ ., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_linear_model,
new_data=dataTest) # Use fit to predict11
bike_predictions ## Look at the output
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
## Write out the file
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=",")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season))%>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE))
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
# Write out the file
vroom_write(x = kaggle_submission, file = "./LinearPredsBaked.csv", delim = ",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
library(recipes)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season))%>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE))
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
# Write out the file
vroom_write(x = kaggle_submission, file = "./LinearPredsBaked.csv", delim = ",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
library(recipes)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season))%>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE))
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
# Write out the file
vroom_write(x = kaggle_submission, file = "./LinearPredsBaked.csv", delim = ",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
library(recipes)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season))%>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE))
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
# Write out the file
vroom_write(x = kaggle_submission, file = "./LinearPredsBaked.csv", delim = ",")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE)) %>%
step_normalize(temp, atemp, humidity, windspeed)
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
# Write out the file
vroom_write(x = kaggle_submission, file = "./LinearPredsBaked.csv", delim = ",")
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
## Write out the file
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
library(recipes)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE)) %>%
step_normalize(temp, atemp, humidity, windspeed)
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
bike_predictions
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
## Write out the file
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=",")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE)) %>%
step_normalize(temp, atemp, humidity, windspeed)
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
library(recipes)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
my_recipe <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE))
prepared_recipe <- my_recipe %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe, new_data = dataTrain)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Preprocess the test data
baked_test <- bake(prepared_recipe, new_data = dataTest)
bike_predictions <- predict(my_linear_model, new_data = baked_test)
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
library(recipes)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
library(recipes)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
my_recipe_train <- recipe(count ~ ., data = dataTrain) %>%
step_log(count, base = 10) %>% # Log transform only in training
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE))
my_recipe_test <- recipe(~ ., data = dataTest) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather = as.factor(weather)) %>%
step_mutate(hour = lubridate::hour(datetime)) %>%
step_mutate(season = as.factor(season)) %>%
step_mutate(day_of_week = lubridate::wday(datetime, label = TRUE)) %>%
step_mutate(month = lubridate::month(datetime, label = TRUE))
prepared_recipe_train <- my_recipe_train %>% prep(training = dataTrain)
baked_train <- bake(prepared_recipe_train, new_data = dataTrain)
prepared_recipe_test <- my_recipe_test %>% prep(training = dataTest)
baked_test <- bake(prepared_recipe_test, new_data = dataTest)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(formula = count ~ ., data = baked_train)
# Predicting on the test data
bike_predictions <- predict(my_linear_model, new_data = baked_test)
# Preparing the Kaggle submission file
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = 10 ^ count) %>%  # Inverse log transformation
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
# Writing out the file
vroom_write(x = kaggle_submission, file = "./LinearPredsBaked.csv", delim = ",")
