## Generate Predictions Using Linear Model
bike_predictions <- predict(my_linear_model,
new_data=dataTest) # Use fit to predict11
bike_predictions ## Look at the output
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
## Write out the file
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=",")
library(poissonreg)
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
dplyr::glimpse(dataTrain)
skimr::skim(dataTrain)
DataExplorer::plot_intro(dataTrain)
DataExplorer::plot_correlation(dataTrain)
DataExplorer::plot_bar(dataTrain)
DataExplorer::plot_histogram(dataTrain)
DataExplorer::plot_missing(dataTrain)
#Plot 1: Scatter plot of temperature vs count
plot1 <- ggplot(data = dataTrain, aes(x=temp, y=count)) +
geom_point(color = "blue") +
geom_smooth(se = FALSE, color = "red") +
ggtitle("Temperature vs. Bike Count")
#Plot 2: Bar plot of weather conditions
plot2 <- ggplot(data = dataTrain, aes(x=weather)) +
geom_bar(fill = "lightblue") +
ggtitle("Weather Conditions")
#Plot 3: Histogram of wind speed
plot3 <- ggplot(data = dataTrain, aes(x=windspeed)) +
geom_histogram(fill = "lightgreen", bins = 20) +
ggtitle("Wind Speed Distribution")
#Plot 4: Box plot of humidity vs count
plot4 <- ggplot(data = dataTrain, aes(x=factor(humidity), y=count)) +
geom_boxplot(fill = "orange") +
ggtitle("Humidity vs. Bike Count")
combined_plot <- (plot1 | plot2) / (plot3 | plot4)
print(combined_plot)
ggsave("4_panel_bikeshare_plot.png", plot = combined_plot, width = 12, height = 8)
## Setup and Fit the Linear Regression Model
my_linear_model <- linear_reg() %>% #Type of model
set_engine("lm") %>% # Engine = What R function to use
set_mode("regression") %>% # Regression just means quantitative response6
fit(formula=count ~ ., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_linear_model,
new_data=dataTest) # Use fit to predict11
bike_predictions ## Look at the output
library(poissonreg)
install.packages("poissonreg")
library(poissonreg)
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_model("regression") %>%
fit(formula=Response~X1+X2+..., data=dataTrain)
library(poissonreg)
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_model("regression") %>%
fit(formula=Response~X1+X2+..., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_poisson_model,
new_data=dataTest) # Use fit to predict
bike_predictions ## Look at the output
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_model("regression") %>%
fit(formula=Response~X1+X2+..., data=dataTrain)
library(poissonreg)
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_mode("regression") %>%
fit(formula=Response~X1+X2+..., data=dataTrain)
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_mode("regression") %>%
fit(formula=count~., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_poisson_model,
new_data=dataTest) # Use fit to predict
library(poissonreg)
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_mode("regression") %>%
fit(formula=count~., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_pois_model,
new_data=dataTest) # Use fit to predict
bike_predictions ## Look at the output
library(poissonreg)
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_mode("regression") %>%
fit(formula=count~., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_pois_model,
new_data=dataTest) # Use fit to predict
bike_predictions ## Look at the output
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PoissonPreds.csv", delim=",")
View(dataTrain)
install.packages("lubridate")
library(lubridate) # For handling date-time objects
# Extracting new time-based features from the datetime column
dataTrain <- dataTrain %>%
mutate(datetime = as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S")) %>%
mutate(hour = hour(datetime),
day_of_week = wday(datetime, label = TRUE),
month = month(datetime),
year = year(datetime),
season = case_when(
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
month %in% c(9, 10, 11) ~ "Fall",
month %in% c(12, 1, 2) ~ "Winter"
))
# Applying log transformation to relevant numeric variables
dataTrain <- dataTrain %>%
mutate(log_temp = log(temp + 1),       # Adding 1 to avoid log(0)
log_windspeed = log(windspeed + 1),
log_humidity = log(humidity + 1))
# Now, you can fit the model with these transformed variables
my_pois_model <- poisson_reg() %>%
set_engine("glm") %>%
set_mode("regression") %>%
fit(formula = count ~ log_temp + log_windspeed + log_humidity + hour + day_of_week + season, data = dataTrain)
# Proceed with predictions as before
bike_predictions <- predict(my_pois_model, new_data = dataTest)
# Apply the same time-based and log transformations to dataTest
dataTest <- dataTest %>%
mutate(datetime = as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S")) %>%
mutate(hour = hour(datetime),
day_of_week = wday(datetime, label = TRUE),
month = month(datetime),
year = year(datetime),
season = case_when(
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
month %in% c(9, 10, 11) ~ "Fall",
month %in% c(12, 1, 2) ~ "Winter"
)) %>%
mutate(log_temp = log(temp + 1),       # Adding 1 to avoid log(0)
log_windspeed = log(windspeed + 1),
log_humidity = log(humidity + 1))
# Proceed with predictions after the same transformations
bike_predictions <- predict(my_pois_model, new_data = dataTest)
# Prepare submission as before
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./PoissonPreds_with_log_features.csv", delim = ",")
library(poissonreg)
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_mode("regression") %>%
fit(formula=count~., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_pois_model,
new_data=dataTest) # Use fit to predict
bike_predictions ## Look at the output
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PoissonPreds.csv", delim=",")
----------test-----------
library(lubridate) # For handling date-time objects
dataTest <- dataTest %>%
mutate(datetime = as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S")) %>%
mutate(hour = hour(datetime),
day_of_week = wday(datetime, label = TRUE),
month = month(datetime),
year = year(datetime),
season = case_when(
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
month %in% c(9, 10, 11) ~ "Fall",
month %in% c(12, 1, 2) ~ "Winter"
)) %>%
mutate(log_temp = log(temp + 1),       # Adding 1 to avoid log(0)
log_windspeed = log(windspeed + 1),
log_humidity = log(humidity + 1))
bike_predictions <- predict(my_pois_model, new_data = dataTest)
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./PoissonPreds_with_log_features.csv", delim = ",")
View(dataTest)
View(dataTrain)
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
#-----EDA-------------
dplyr::glimpse(dataTrain)
skimr::skim(dataTrain)
DataExplorer::plot_intro(dataTrain)
DataExplorer::plot_correlation(dataTrain)
DataExplorer::plot_bar(dataTrain)
DataExplorer::plot_histogram(dataTrain)
DataExplorer::plot_missing(dataTrain)
#Plot 1: Scatter plot of temperature vs count
plot1 <- ggplot(data = dataTrain, aes(x=temp, y=count)) +
geom_point(color = "blue") +
geom_smooth(se = FALSE, color = "red") +
ggtitle("Temperature vs. Bike Count")
#Plot 2: Bar plot of weather conditions
plot2 <- ggplot(data = dataTrain, aes(x=weather)) +
geom_bar(fill = "lightblue") +
ggtitle("Weather Conditions")
#Plot 3: Histogram of wind speed
plot3 <- ggplot(data = dataTrain, aes(x=windspeed)) +
geom_histogram(fill = "lightgreen", bins = 20) +
ggtitle("Wind Speed Distribution")
#Plot 4: Box plot of humidity vs count
plot4 <- ggplot(data = dataTrain, aes(x=factor(humidity), y=count)) +
geom_boxplot(fill = "orange") +
ggtitle("Humidity vs. Bike Count")
combined_plot <- (plot1 | plot2) / (plot3 | plot4)
print(combined_plot)
ggsave("4_panel_bikeshare_plot.png", plot = combined_plot, width = 12, height = 8)
---------------------------------------------------------
#--------Linear Model--------------
## Setup and Fit the Linear Regression Model
my_linear_model <- linear_reg() %>% #Type of model
set_engine("lm") %>% # Engine = What R function to use
set_mode("regression") %>% # Regression just means quantitative response6
fit(formula=count ~ ., data=dataTrain)
ggsave("4_panel_bikeshare_plot.png", plot = combined_plot, width = 12, height = 8)
ggsave("4_panel_bikeshare_plot.png", plot = combined_plot, width = 12, height = 8)
ggsave("4_panel_bikeshare_plot.png", plot = combined_plot, width = 12, height = 8)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_linear_model,
new_data=dataTest) # Use fit to predict11
bike_predictions ## Look at the output
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
## Write out the file
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=",")
#---------Poisson model-------------
library(poissonreg)
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_mode("regression") %>%
fit(formula=count~., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_pois_model,
new_data=dataTest) # Use fit to predict
bike_predictions ## Look at the output
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PoissonPreds.csv", delim=",")
# Load necessary libraries
library(poissonreg)
library(dplyr)
library(caret)
library(glmnet)
install.packages("caret")
# Load necessary libraries
library(poissonreg)
library(dplyr)
library(caret)
library(glmnet)
install.packages("glmnet")
# Load necessary libraries
library(poissonreg)
library(dplyr)
library(caret)
library(glmnet)
library(vroom)
# Feature Engineering - Create new features from datetime
dataTrain <- dataTrain %>%
mutate(hour = as.numeric(format(datetime, "%H")),
day_of_week = as.numeric(format(datetime, "%w")),
is_weekend = ifelse(day_of_week %in% c(6, 0), 1, 0),
hour_weekend_interaction = hour * is_weekend)
dataTest <- dataTest %>%
mutate(hour = as.numeric(format(datetime, "%H")),
day_of_week = as.numeric(format(datetime, "%w")),
is_weekend = ifelse(day_of_week %in% c(6, 0), 1, 0),
hour_weekend_interaction = hour * is_weekend)
# Scaling/Normalization of numeric variables
dataTrain <- dataTrain %>%
mutate(across(where(is.numeric), scale))
dataTest <- dataTest %>%
mutate(across(where(is.numeric), scale))
# Cross-validation setup
train_control <- trainControl(method = "cv", number = 10)
# Poisson Regression with Cross-Validation
my_pois_model <- train(count ~ ., data = dataTrain,
method = "glm", family = poisson(),
trControl = train_control)
# Generate Predictions Using Poisson Model
bike_predictions <- predict(my_pois_model, new_data = dataTest)
# Ensure consistent types in both datasets
factor_vars <- c('season', 'holiday', 'workingday', 'weather')
dataTrain <- dataTrain %>%
mutate(across(all_of(factor_vars), as.factor))
dataTest <- dataTest %>%
mutate(across(all_of(factor_vars), as.factor))
# If needed, ensure numeric variables stay as numeric
numeric_vars <- c('temp', 'atemp', 'humidity', 'windspeed')
dataTrain <- dataTrain %>%
mutate(across(all_of(numeric_vars), as.numeric))
dataTest <- dataTest %>%
mutate(across(all_of(numeric_vars), as.numeric))
# Feature Engineering - Create new features from datetime
dataTrain <- dataTrain %>%
mutate(hour = as.numeric(format(datetime, "%H")),
day_of_week = as.numeric(format(datetime, "%w")),
is_weekend = ifelse(day_of_week %in% c(6, 0), 1, 0),
hour_weekend_interaction = hour * is_weekend)
dataTest <- dataTest %>%
mutate(hour = as.numeric(format(datetime, "%H")),
day_of_week = as.numeric(format(datetime, "%w")),
is_weekend = ifelse(day_of_week %in% c(6, 0), 1, 0),
hour_weekend_interaction = hour * is_weekend)
# Scaling/Normalization of numeric variables
dataTrain <- dataTrain %>%
mutate(across(where(is.numeric), scale))
dataTest <- dataTest %>%
mutate(across(where(is.numeric), scale))
# Cross-validation setup
train_control <- trainControl(method = "cv", number = 10)
# Poisson Regression with Cross-Validation
my_pois_model <- train(count ~ ., data = dataTrain,
method = "glm", family = poisson(),
trControl = train_control)
# Generate Predictions Using Poisson Model
bike_predictions <- predict(my_pois_model, new_data = dataTest)
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(skimr)
library(patchwork)
library(DataExplorer)
dataTrain <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/train.csv")%>%
select(-casual, -registered)
dataTest <- vroom("/Users/carsoncollins/Desktop/Stat348/BikeShare/test.csv")
#-----EDA-------------
dplyr::glimpse(dataTrain)
skimr::skim(dataTrain)
DataExplorer::plot_intro(dataTrain)
DataExplorer::plot_correlation(dataTrain)
DataExplorer::plot_bar(dataTrain)
DataExplorer::plot_histogram(dataTrain)
ggsave("4_panel_bikeshare_plot.png", plot = combined_plot, width = 12, height = 8)
#--------Linear Model--------------
## Setup and Fit the Linear Regression Model
my_linear_model <- linear_reg() %>% #Type of model
set_engine("lm") %>% # Engine = What R function to use
set_mode("regression") %>% # Regression just means quantitative response6
fit(formula=count ~ ., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_linear_model,
new_data=dataTest) # Use fit to predict11
bike_predictions ## Look at the output
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
## Write out the file
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=",")
#---------Poisson model-------------
library(poissonreg)
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_mode("regression") %>%
fit(formula=count~., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_pois_model,
new_data=dataTest) # Use fit to predict
bike_predictions ## Look at the output
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PoissonPreds.csv", delim=",")
#---------Poisson model-------------
library(poissonreg)
my_pois_model <- poisson_reg() %>% #Type of model
set_engine("glm") %>% # GLM = generalized linear model
set_mode("regression") %>%
fit(formula=count~., data=dataTrain)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_pois_model,
new_data=dataTest) # Use fit to predict
bike_predictions ## Look at the output
library(lubridate) # For handling date-time objects
# Extracting new time-based features from the datetime column
dataTrain <- dataTrain %>%
mutate(datetime = as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S")) %>%
mutate(hour = hour(datetime),
day_of_week = wday(datetime, label = TRUE),
month = month(datetime),
year = year(datetime),
season = case_when(
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
month %in% c(9, 10, 11) ~ "Fall",
month %in% c(12, 1, 2) ~ "Winter"
))
# Applying log transformation to relevant numeric variables
dataTrain <- dataTrain %>%
mutate(log_temp = log(temp + 1),       # Adding 1 to avoid log(0)
log_windspeed = log(windspeed + 1),
log_humidity = log(humidity + 1))
# Now, you can fit the model with these transformed variables
my_pois_model <- poisson_reg() %>%
set_engine("glm") %>%
set_mode("regression") %>%
fit(formula = count ~ log_temp + log_windspeed + log_humidity + hour + day_of_week + season, data = dataTrain)
# Proceed with predictions as before
bike_predictions <- predict(my_pois_model, new_data = dataTest)
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PoissonPreds.csv", delim=",")
library(lubridate) # For handling date-time objects
# Extracting new time-based features from the datetime column
dataTrain <- dataTrain %>%
mutate(datetime = as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S")) %>%
mutate(hour = hour(datetime),
day_of_week = wday(datetime, label = TRUE),
month = month(datetime),
year = year(datetime),
season = case_when(
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
month %in% c(9, 10, 11) ~ "Fall",
month %in% c(12, 1, 2) ~ "Winter"
))
# Applying log transformation to relevant numeric variables
dataTrain <- dataTrain %>%
mutate(log_temp = log(temp + 1),       # Adding 1 to avoid log(0)
log_windspeed = log(windspeed + 1),
log_humidity = log(humidity + 1))
# Now, you can fit the model with these transformed variables
my_pois_model <- poisson_reg() %>%
set_engine("glm") %>%
set_mode("regression") %>%
fit(formula = count ~ log_temp + log_windspeed + log_humidity + hour + day_of_week + season, data = dataTrain)
dataTest <- dataTest %>%
mutate(datetime = as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S")) %>%
mutate(hour = hour(datetime),
day_of_week = wday(datetime, label = TRUE),
month = month(datetime),
year = year(datetime),
season = case_when(
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
month %in% c(9, 10, 11) ~ "Fall",
month %in% c(12, 1, 2) ~ "Winter"
)) %>%
mutate(log_temp = log(temp + 1),       # Adding 1 to avoid log(0)
log_windspeed = log(windspeed + 1),
log_humidity = log(humidity + 1))
# Proceed with predictions after the same transformations
bike_predictions <- predict(my_pois_model, new_data = dataTest)
kaggle_submission <- bike_predictions %>%
bind_cols(., dataTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and prediction variables
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=kaggle_submission, file="./PoissonPreds.csv", delim=",")
